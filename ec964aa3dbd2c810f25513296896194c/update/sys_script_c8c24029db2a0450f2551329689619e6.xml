<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_momo_jira_integr_issue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_momo_jira_integr_issue">external_idISEMPTY^approvalCHANGESTOapproved^ORapproval=approved^EQ<item endquery="false" field="external_id" goto="false" newquery="false" operator="ISEMPTY" or="false" value=""/>
            <item endquery="false" field="approval" goto="false" newquery="false" operator="CHANGESTO" or="false" value="approved"/>
            <item endquery="false" field="approval" goto="false" newquery="false" operator="=" or="true" value="approved"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Jira Issue</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions>x_momo_jira_integr.issue_tech</role_conditions>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
  gs.include('JiraRequestV2');

  var issuetype = getExternalId('x_momo_jira_integr_issue_type', current.getValue('issue_type'));
  var priority = getExternalId('x_momo_jira_integr_priority', current.getValue('priority'));
  var project = getExternalId('x_momo_jira_integr_project', current.getValue('project'));
  var fields = {
    issuetype: {
      id: issuetype
    },
    priority: {
      id: priority
    },
    project: {
      id: project
    },
    summary: current.getValue('short_description'),
    description: current.getValue('description'),
    components: getProducts(),
    customfield_10952: current.sys_id.toString(),
    customfield_10941: current.getValue('request_implementation_date'),
    customfield_10955: current.getValue('number')
  };

  if (!gs.nil(current.getValue('requested_for'))) {
    fields.customfield_10301 = current.getDisplayValue('requested_for');
  } else {
    fields.customfield_10301 = gs.getUserDisplayName();
  }

  if (current.issue_type.name == 'Epic') {
    fields.customfield_10002 = current.getValue('epic_name');
  }

  var payload = {
    fields: fields,
    update: {},
    expand: 'transitions'
  };
  var request = new JiraRequestV2();
  request.setOptions({
    path: 'issue',
    qs: {
      expand: 'transitions'
    },
    method: 'POST',
    body: payload,
    async: false
  });
  request.send();
  request.getResponse(createIssue);

  function createIssue(response) {
    if (!response) {
      current.deleteRecord();
      return;
    }
    if (response.id && response.key) {
      current.external_id = response.id;
      current.external_key = response.key;
      current.update();
      var jAttachment = new JiraAttachment();
      jAttachment.createMultipartRequestFromGr(current);

      request.send({
        path: 'issue/' + response.id + '/transitions',
        method: 'GET',
        body: null,
        qs: null,
        async: false
      });
      var status = getExternalId('x_momo_jira_integr_status', current.getValue('status'));
      var res = request.getResponse();
      var transition = setIssueStatus(res, status);

      if (transition) {
        request.send({
          method: 'POST',
          body: {
            transition: {
              id: transition
            }
          },
          async: true
        });
      }
    }
  }

  function setIssueStatus(response, external_id) {
    if (!response) return;
    var transitions = response.transitions.filter(function (transition) {
      return transition.to.id == external_id;
    });
    if (transitions.length > 0) return transitions[0].id;
  }




  function getExternalId(table, sys_id) {
    var instance = new GlideRecord(table);
    instance.get(sys_id);
    if (instance.isValid()) {
      return instance.getValue('external_id');
    }
  }

  function getProducts() {
    var products = [];
    if (gs.nil(current.products)) return products;

    var gProducts = new GlideRecord('x_momo_jira_integr_product');
    gProducts.addEncodedQuery('sys_idIN' + current.products);
    gProducts.query();
    while (gProducts.next()) {
      products.push({
        id: gProducts.getValue('external_id')
      });
    }
    return products;
  }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>douglas.schamberg@movement.com</sys_created_by>
        <sys_created_on>2020-01-24 09:39:06</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c8c24029db2a0450f2551329689619e6</sys_id>
        <sys_mod_count>125</sys_mod_count>
        <sys_name>Create Jira Issue</sys_name>
        <sys_overrides/>
        <sys_package display_value="Jira Integration" source="x_momo_jira_integr">ec964aa3dbd2c810f25513296896194c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Jira Integration">ec964aa3dbd2c810f25513296896194c</sys_scope>
        <sys_update_name>sys_script_c8c24029db2a0450f2551329689619e6</sys_update_name>
        <sys_updated_by>Adrian.Wilson</sys_updated_by>
        <sys_updated_on>2022-09-15 17:51:51</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=c8c24029db2a0450f2551329689619e6"/>
</record_update>
