<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_momo_jira_integr.MultipartHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>MultipartHelper</name>
        <script><![CDATA[var MultipartHelper = Class.create();
MultipartHelper.prototype = {

  // these store the attachment we're tryign to format as a multipart request.
  attachmentId: null,
  attachmentGR: null,

  // the host record is where the temporary attachment is stored after it's recieved from the loopback API 
  grHostRecord: null,

  // this is the ID of the "multipart" attachment that should be included in outgoing POST.
  bodyAttachmentId: null,

  initialize: function () {
    this.boundaryId = this._getBoundaryId();
  },

  // We need a record to link the temporary attachment to.
  // (Default is the the sys_user record of the calling user)
  // For Unifi this is likely to be the HTTPRequest record
  setHostRecord: function (grHostRecord) {
    this.grHostRecord = grHostRecord;
  },
  // Alternatively, we could call setHostDetails( table_name, sys_id )
  setHostDetails: function (hostTable, hostSysId) {
    var grHostRecord = new GlideRecord(hostTable);
    if (grHostRecord.get(hostSysId)) {
      this.grHostRecord = grHostRecord;
      return true;
    }
    return false;
  },

  // When adding an attachment we need to specify two or three things
  // - the name of the form field that the target is expecting
  // - the sys_id of the attachment to add
  addAttachment: function (formName, attachmentId) {

    this.formName = formName;
    this.attachmentId = attachmentId;

    this.attachmentGR = this._getAttachmentGR(this.attachmentId);
    if (this.attachmentGR) {

      this.attachmentName = this.attachmentGR.file_name.toString();

      return true;
    }

    return false;
  },

  // Generate the temporary attachment
  createBody: function () {

    // make sure we have already looked up the attachment
    if (!this.attachmentGR) {
      return false;
    }

    // generate a message to the loopback api
    var request = new sn_ws.RESTMessageV2();
    request.setEndpoint(gs.getProperty('glide.servlet.uri') + 'api/x_momo_jira_integr/attachments/helper');
    request.setHttpMethod('GET');
    request.setRequestHeader("Accept", "multipart/form-data");

    // set the metadata for what should be included
    request.setQueryParameter('attachment_id', this.attachmentId);
    request.setQueryParameter('boundary_id', this.boundaryId);
    request.setQueryParameter('form_name', this.formName);
    // we write the response back into an attachment
    request.saveResponseBodyAsAttachment( this.grHostRecord.getTableName(), this.grHostRecord.sys_id, this.attachmentName );
    var response = request.execute();

    // only continue if the result was 200
    if (response.getStatusCode() == 200) {
      this.bodyAttachmentId = response.getResponseAttachmentSysid();
      return true;
    }

    return false;
  },

  // getContentType returns the content-type string including the boundary
  // e.g. multipart/form-data; boundary="xxxxxxxxxxxx"
  getContentType: function () {
    return 'multipart/form-data; boundary=' + this.boundaryId;
  },

  // getBodyId returns the sys_id of the multipart attachment
  getBodyId: function () {
    return this.bodyAttachmentId;
  },

  // Once we have sent the body we can delete the temporary attachment
  deleteBody: function () {
    var attachment = new GlideSysAttachment();
    attachment.deleteAttachment(this.bodyAttachmentId);
  },


  ///// UTIL FUNCTIONS

  _getBoundaryId: function () {

    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < 8; i++)
      text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;


  },

  _getAttachmentGR: function (attachmentSysId) {
    var grSysAttachment = new GlideRecord("sys_attachment");
    if (grSysAttachment.get(attachmentSysId)) {
      return grSysAttachment;
    }
    return false;
  },

  type: 'MultipartHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>douglas.schamberg@movement.com</sys_created_by>
        <sys_created_on>2020-01-25 15:05:35</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b70752f5dbe68450f25513296896196b</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>MultipartHelper</sys_name>
        <sys_package display_value="Jira Integration" source="x_momo_jira_integr">ec964aa3dbd2c810f25513296896194c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Jira Integration">ec964aa3dbd2c810f25513296896194c</sys_scope>
        <sys_update_name>sys_script_include_b70752f5dbe68450f25513296896196b</sys_update_name>
        <sys_updated_by>douglas.schamberg@movement.com</sys_updated_by>
        <sys_updated_on>2020-01-25 16:24:37</sys_updated_on>
    </sys_script_include>
</record_update>
