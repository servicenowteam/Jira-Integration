<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>sysverb_new</action_name>
        <active>true</active>
        <client>false</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition/>
        <form_action>false</form_action>
        <form_button>false</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <format_for_configurable_workspace>false</format_for_configurable_workspace>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>true</list_action>
        <list_banner_button>true</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style>unstyled</list_style>
        <messages/>
        <name>Import Issue Link Types</name>
        <onclick/>
        <order>100</order>
        <script><![CDATA[gs.include('JiraRequestV2');
var util = new global.ArrayUtil();
var request = new JiraRequestV2();

var response = request.send({
  path: 'issueLinkType'
}).getResponse(function(results) {
  if (!results) return [];
  if (!Array.isArray(results.issueLinkTypes)) return [];
  if (results.issueLinkTypes.length === 0) return [];
  var alreadyExistsInTable = [];
  var gLinkTypes = new GlideRecord('x_momo_jira_integr_issue_link_type');
  gLinkTypes.query();
  while (gLinkTypes.next()) {
    alreadyExistsInTable.push(gLinkTypes.getValue('external_id'));
  }

  return results.issueLinkTypes.filter(function(link) {
    return !util.contains(alreadyExistsInTable, link.id);
  }).map(function (linkType) {
    return {
      external_id: linkType.id,
      name: linkType.name,
      inward_type_name: linkType.inward,
      outward_type_name: linkType.outward,
      self: linkType.self
    };
  });
});



response.forEach(function(linkType) {
  var instance = new GlideRecord('x_momo_jira_integr_issue_link_type');
  instance.initialize();
  
  var keys = Object.keys(linkType);
  for (var i in keys) {
    instance[keys[i]] = linkType[keys[i]];
  }
  instance.insert();
});]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-02-13 08:40:12</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ab35b6331b32405048a242e58d4bcb62</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Import Issue Link Types</sys_name>
        <sys_overrides/>
        <sys_package display_value="Jira Integration" source="x_momo_jira_integr">ec964aa3dbd2c810f25513296896194c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Jira Integration">ec964aa3dbd2c810f25513296896194c</sys_scope>
        <sys_update_name>sys_ui_action_ab35b6331b32405048a242e58d4bcb62</sys_update_name>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-03-22 17:08:38</sys_updated_on>
        <table>x_momo_jira_integr_issue_link_type</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
